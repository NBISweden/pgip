---
engine: knitr
format: html
---

<!-- markdownlint-disable MD041 -->

{{< include ../_knitr.qmd >}}

{{< include ../_rlibs.qmd >}}

<!-- markdownlint-enable MD041 -->

# Filtering of resequencing data {#sec-E130-data_filtering}

FIXME: text

Regardless of how a raw variant call set has been produced, the calls
will be of varying quality for a number of reasons. For high-coverage
sequencing, the two most common are incompleteness of the reference
sequence and misaligmnents in repetitive regions
[@li_BetterUnderstandingArtifacts_2014]. Low-coverage sequencing comes
with its own biases, such as

<!-- markdownlint-disable MD013 -->

```{r, engine='tikz', fig.ext="svg"}
#| label: fig-coverage-filters-1
#| echo: false
#| eval: true
#| fig-cap: Coverage distributions for three hypothetical samples along with the cumulative coverage for all samples.
\addcolumnsum{\coveragetable}{A1,A2,A3}{Asum}
\addthresholdmask{\coveragetable}{A1}{A1mask}
\addthresholdmask{\coveragetable}{A2}{A2mask}
\addthresholdmask{\coveragetable}{A3}{A3mask}
\addthresholdmask{\coveragetable}{Asum}{Asummask}

\let\Aonemask\empty
\formatmask{\coveragetable}{\Aonemask}{A1mask}
\let\Atwomask\empty
\formatmask{\coveragetable}{\Atwomask}{A2mask}
\let\Athreemask\empty
\formatmask{\coveragetable}{\Athreemask}{A3mask}
\let\Asummask\empty
\formatmask{\coveragetable}{\Asummask}{Asummask}

\begin{tikzpicture}[x=1pt, y=1pt]
\pic[at={(0, 0)}] (A1) {coverageplot={\coveragetable}{ref}{A1}{Sample 1}{blue}};
%%\matrix[mask, anchor=west, at={($(A1.south west)+(3pt, -10pt)$)}] (A1mask) {\Aonemask};
\pic[yshift=-100pt] (A2) {coverageplot={\coveragetable}{ref}{A2}{Sample 2}{blue}};
%%\matrix[mask, anchor=west, at={($(A2.south west)+(3pt, -10pt)$)}] (A2mask) {\Atwomask};

\pic[yshift=-200pt] (A3) {coverageplot={\coveragetable}{ref}{A3}{Sample 3}{blue}};
%%\matrix[mask, anchor=west, at={($(A3.south west)+(3pt, -10pt)$)}] (A3mask) {\Athreemask};

\pgfplotsset{covaxis/.append style={ymax=45}}
\pic[xshift=250pt,yshift=-120pt](Asum){coverageplot={\coveragetable}{ref}{Asum}{All samples}{red}};
%%\matrix[mask, anchor=west, at={($(Asum.south west)+(3pt, -10pt)$)}] (Asummask) {\Asummask};

\end{tikzpicture}
```

<!-- markdownlint-enable MD013 -->

::: {.callout-warning}

## FIXME

Discuss different types of relevant filters, e.g.

- filtering on read depth, both high to eliminate collapsed repeats,
  and low for mappability issues. This is particularly important for
  incomplete assemblies
- also briefly mention filtering on polymorphic sites

:::

## Intended learning outcomes

- create per sample, per population, and total depth of coverage profiles
- generate mask files for downstream processing

## Tools

- [mosdepth](https://github.com/brentp/mosdepth)  [@pedersen_MosdepthQuickCoverage_2018]
- [samtools](https://github.com/samtools/samtools) [@danecek_TwelveYearsSAMtools_2021]
- [csvtk](https://bioinf.shenwei.me/csvtk/)
- [bedtools](https://bedtools.readthedocs.io/en/latest/index.html) [@quinlan_BEDToolsFlexibleSuite_2010]
- [seqkit](https://bioinf.shenwei.me/seqkit/) [@shen_SeqKitCrossPlatformUltrafast_2016]

## Input data

We will be working with the [Out of
Africa](../data.qmd#sec-data-simulated-ooa) dataset, consisting of 10
samples from the CEU, CHB, and YRI populations. The input consists of
10 bam files:

```{bash }
#| label: e130-input-data
#| echo: true
#| eval: true
ls -lLh [CY]*.chr21.bam
```

Each population consists of a collection -- or set -- of samples, and
we will sometimes use the term `sample set` to refer to such a
collection. For instance, the population (sample set) `CHB` consists
of the set of samples `CHB-1`, `CHB-2` and `CHB-3`.

## Coverage analyses

Mapped reads provide information about how well a given genomic region
has been represented during sequencing, and this information is
usually summarized as the sequencing coverage. For any locus, this is
equivalent to the number of reads mapping to that locus.

Sequencing coverage is typically not uniformly distributed over the
reference. Reasons may vary but include uneven mapping coverage due to
repeat regions, low coverage due to mis-assemblies, or coverage biases
generated in the sequencing process. Importantly, both variable and
monomorphic sites must be treated identically in the filtering process
to eliminate biases between the two kinds of sites.

In this part, we will use `mosdepth` and `bedtools` to quickly
generate depth of coverage profiles of mapped data. `mosdepth` is an
ultra-fast command line tool for calculating coverage from a bam file.
By default, it generates a summary of the global distribution, and
per-base coverage in `bed.gz` format. We will be using the per-base
coverage for filtering.

Alternatively, `mosdepth` can also output results in a highly
compressed format `d4`, which has been developed to handle the ever
increasing size of resequencing projects. Files in d4 format can be
processed with the [d4-tools](https://github.com/38/d4-format) tool
[@hou_BalancingEfficientAnalysis_2021]. For instance, `d4tools view`
will display the coverage in `bed` format. We mention this in passing
as it may be relevant when working with large genomes or sample sizes,
but given the size of our sample data, we will be using `bedtools`
from now on.

### Per sample coverage

We start by calculating per-sample coverages with `mosdepth`. For
downstream purposes, we need to save the size of the chromosomes we're
looking at, and for many applications, a fasta index file is
sufficient.

```{bash }
#| label: samtools-faidx
#| echo: true
#| eval: true
samtools faidx ooa.chr21.ref.fa
```

The syntax to generate coverage information for a bam file is
`mosdepth <prefix> <input file>`. Here, we add the `-Q` option to
exclude reads with a mapping quality less than 20:

```{bash }
#| label: mosdepth-one-sample
#| echo: true
#| eval: true
mosdepth -Q 20 CEU-1 CEU-1.ooa.chr21.bam
```

The per-base coverage output file will be named
`CEU-1.per-base.bed.gz` and can be viewed with `bgzip`:

```{bash }
#| label: bgzip-view-sample
#| echo: true
#| eval: true
bgzip -c -d CEU-1.per-base.bed.gz | head -n 5
```

To get an idea of what the coverage looks like over the chromsome, we
can use `bedtools` and `cvstk` in a one-liner to generate a simple
coverage plot (@fig-plot-coverage)^[The one-liner combines the results
of several commands in a pipe stream. Also, [Bash
redirections](https://www.gnu.org/software/bash/manual/html_node/Redirections.html)
are used to gather the results from the output of `bedtools
makewindows` to `bedtools intersect`. The intersection commands
collects coverage data in 5kb windows that are then summarized by
`bedtools groupby`.]

```{bash }
#| label: bash-plot-coverage
#| echo: true
#| eval: true
bedtools intersect -a <(bedtools makewindows -g ooa.chr21.ref.fa.fai -w 5000) \
      -b CEU-1.per-base.bed.gz -wa -wb | \
  bedtools groupby -i - -g 1,2,3 -c 7 -o mean | \
  csvtk plot -t line -x 2 -y 4 --point-size 0.01 --xlab Position \
      --ylab Coverage --width 9.0 --height 3.5 > fig-plot-coverage.png
```

::: {#fig-plot-coverage attr-output='.details summary="Output"'}

![](fig-plot-coverage.png)

Coverage for sample CEU-1 in 5kb windows. Experiment changing the
window size (`-w`) parameter to change smoothing.

:::

Apparently there are some high-coverage regions that could be
associated with, e.g., collapsed repeat regions in the assembly. Let's
compile coverage results for all samples, using bash string
manipulation to generate file prefix^[The `%` operator deletes the shortest
match of `$substring` from back of `$string`: `${string%substring}`.
See [Bash string
manipulation](https://tldp.org/LDP/abs/html/string-manipulation.html)
for more information.]

```{bash }
#| label: mosdepth-compile-coverage-data
#| echo: true
#| eval: true
for f in [CY]*.chr21.bam; do
  prefix=${f%.ooa.chr21.bam}
  mosdepth -Q 20 $prefix $f
  echo -e -n "$prefix\t"
  cat $prefix.mosdepth.summary.txt | grep total
done > ALL.mosdepth.summary.txt
cat ALL.mosdepth.summary.txt
```

We can calculate the total coverage with `csvtk` as follows:

```{bash }
#| label: mosdepth-compile-coverage-data-sum
#| echo: true
#| eval: false
csvtk summary -H -t ALL.mosdepth.summary.txt -f 5:sum
```

```{r }
#| label: mosdepth-compile-coverage-data-total
#| echo: false
#| eval: true
x <- read.table("ALL.mosdepth.summary.txt")
total_coverage <- sum(x$V5)
```

to get the total coverage `r total_coverage`, which gives a hint at
where the diploid coverage peak should be.

### Sample set coverages

We can combine coverage intervals with `bedtools unionbedg`. We
collect the bed file names and generate matching sample names to pass
as arguments to option `-names`. Also, we include positions with no
coverage (`-empty`) which requires the use of a genome file (option
`-g`). The bed output is piped to `bgzip` which compresses the output,
before finally indexing with `tabix`:

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: bedtools-unionbedg-all
#| echo: true
#| eval: true
BEDGZ=$(for f in *.per-base.bed.gz; do echo "$f "; done)
SAMPLES=$(for f in $BEDGZ; do echo -e -n "${f%.per-base.bed.gz} "; done)
bedtools unionbedg -header -names $SAMPLES -g ooa.chr21.ref.fa.fai -empty -i $BEDGZ | bgzip > ALL.bg.gz
tabix -f -p bed -S 1 ALL.bg.gz
```

<!-- markdownlint-enable MD013 -->

We also need to combine coverages per populations CEU, CHB, and YRI.
Using the previous command as a template, try to generate per
population coverage files.

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: bedtools-unionbedg-per-population
#| echo: true
#| eval: true
#| code-fold: true
for pop in CEU CHB YRI; do
  BEDGZ=$(for f in ${pop}*.per-base.bed.gz; do echo "$f "; done)
  SAMPLES=$(for f in $BEDGZ; do echo -e -n "${f%.per-base.bed.gz} "; done)
  bedtools unionbedg -header -names $SAMPLES -g ooa.chr21.ref.fa.fai -empty -i $BEDGZ | bgzip > $pop.bed.gz
  tabix -f -p bed -S 1 $pop.bed.gz
done
```

<!-- markdownlint-enable MD013 -->

### Total coverage

Since we eventually want to filter on total coverage, we sum per
sample coverages for each sample set with `awk`:

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: awk-sum-ALL-coverage
#| echo: true
#| eval: true
bgzip -c -d ALL.bg.gz | awk -v FS="\t" -v OFS="\t" 'NR > 1 {sum=0; for (i=4; i<=NF; i++) sum+=$i; print $1, $2, $3, sum}' | bgzip > ALL.sum.bed.gz
tabix -f -p bed ALL.sum.bed.gz
```

<!-- markdownlint-enable MD013 -->

For illustration, we plot the total coverage:

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: total-coverage
#| echo: true
#| eval: true
#| fig-show: asis
#| fig-cap: Coverage for ALL samples in 5kb windows. Experiment changing the window size (`-w`) parameter to change smoothing.
bedtools intersect -a <(bedtools makewindows -g ooa.chr21.ref.fa.fai -w 5000) \
    -b ALL.sum.bed.gz -wa -wb | \
  bedtools groupby -i - -g 1,2,3 -c 7 -o mean | \
  csvtk plot -t line -x 2 -y 4 --point-size 0.01 --xlab Position \
    --ylab Coverage --width 9.0 --height 3.5 > fig-plot-total-coverage.png
```

<!-- markdownlint-enable MD013 -->

::: {#fig-plot-total-coverage attr-output='.details summary="Output"'}

![](fig-plot-total-coverage.png)

Total coverage in 5kb windows.

:::

In order to define thresholds for subsequent filtering, we plot the
proportion of the genome coverage versus depth of coverage (similar to
k-mer plots in sequence assembly projects). In

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: total-depth-of-coverage-distribution
#| echo: false
#| eval: true
zcat ALL.sum.bed.gz | \
  awk -v h=0 'BEGIN {OFS=","; cumsum=0} {a[$4] += ($3-$2)/1000; if ($4 > h) {h=$4}} END{for (i=0; i<=h; i++) {if (a[i]) {cumsum+=a[i]} else {a[i]=0;} print i, a[i], cumsum}}' \
    > ALL.sum.bed.csv
cat ALL.sum.bed.csv | csvtk plot line -x 1 -y 2 --point-size 0.01 --xlab "Depth of coverage (X)" --ylab "Genome coverage (kbp)" --width 9.0 --height 3.5 \
    > fig-plot-total-coverage-distribution.png
cat ALL.sum.bed.csv | csvtk plot line -x 1 -y 3 --point-size 0.01 --xlab "Depth of coverage (X)" --ylab "Cumulative genome coverage (kbp)" --width 9.0 --height 3.5 \
    > fig-plot-total-coverage-distribution-cumulative.png
```

::: {#fig-plot-total-coverage-distribution attr-output='.details summary="Output"' layout-nrow=2}

![Genome coverage](fig-plot-total-coverage-distribution.png){#fig-plot-total-coverage-distribution-hist}

![Cumulative genome coverage](fig-plot-total-coverage-distribution-cumulative.png){#fig-plot-total-coverage-distribution-cumulative}

Genome coverage vs depth of coverage.
:::

<!-- markdownlint-enable MD013 -->

In @fig-plot-total-coverage-distribution a, a diploid peak is
evident just below coverage X=150; we zoom in on that region to get a
better view:

```{bash }
#| label: total-depth-of-coverage-zoom-in
#| echo: true
#| eval: false
cat ALL.sum.bed.csv | \
  csvtk plot line -x 1 -y 2 --point-size 0.01 \
    --xlab "Depth of coverage (X)" --ylab "Genome coverage (kbp)" \
    --width 9.0 --height 3.5 --x-min 90 --x-max 160
```

```{bash }
#| label: plot-total-depth-of-coverage-zoom-in
#| echo: false
#| eval: true
cat ALL.sum.bed.csv | \
  csvtk plot line -x 1 -y 2 --point-size 0.01 \
    --xlab "Depth of coverage (X)" --ylab "Genome coverage (kbp)" \
    --width 9.0 --height 3.5 --x-min 90 --x-max 160 > \
    fig-plot-total-coverage-distribution-hist-zoom-in.png
```

<!-- markdownlint-disable MD013 -->

::: {#fig-plot-total-coverage-distribution-zoom-in attr-output='.details summary="Output"'}

![Genome coverage](fig-plot-total-coverage-distribution-hist-zoom-in.png){#fig-plot-total-coverage-distribution-hist-zoom-in}

Genome coverage vs depth of coverage.

:::

<!-- markdownlint-enable MD013 -->

[@lou_BeginnerGuideLowcoverage_2021] point out that appropriate
thresholds depend on the data set, but as a general rule recommends a
minimum depth threshold at <0.8x average coverage, and a maximum depth
threshold at mean coverage plus one or two standard deviations. Given
the unrealistically homogenous coverage of our simulated data, we set
thresholds based on @fig-plot-total-coverage-distribution-zoom-in to
e.g., 100-160.

We then use these thresholds to generate a bed file containing regions
that are accessible, i.e., have sufficient coverage for downstream
analyses. We also calculate the number of bases that pass the
filtering criteria.

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: filter-all-bed-file-on-coverage
#| echo: true
#| eval: true
zcat ALL.sum.bed.gz | awk '{if (($4 >= 100) && ($4 <= 160)) print $0}' > ALL.sum.depth.bed.gz
bedtools genomecov -i ALL.sum.depth.bed.gz -g ooa.chr21.ref.fa.fai  | grep genome
```

<!-- markdownlint-enable MD013 -->

```{r }
#| label: r-compute-genome-coverage
#| echo: false
#| eval: true
x <- read.table("ALL.sum.depth.bed.gz", header=FALSE)
cov <- format(sum(x$V3-x$V2) / 1e6 * 100, digits=3)
```

Consequently, `r cov`% of the genome is accessible by depth.

::: {.callout-note}

#### Exercise

Generate coverage sums for sample sets CEU, CHB, and YRI, and from
these determine coverage thresholds and apply the thresholds to
generate bed files with accessible regions.

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: awk-sum-sample-set-coverage
#| echo: true
#| eval: true
#| code-fold: true
for pop in CEU CHB YRI; do
  bgzip -c -d $pop.bed.gz | \
    awk -v FS="\t" -v OFS="\t" 'NR > 1 {sum=0; for (i=4; i<=NF; i++) sum+=$i; print $1, $2, $3, sum}' | \
    bgzip > $pop.sum.bed.gz
  tabix -f -p bed $pop.sum.bed.gz
  zcat $pop.sum.bed.gz | \
    awk -v h=0 'BEGIN {OFS=","; cumsum=0} {a[$4] += ($3-$2)/1000; if ($4 > h) {h=$4}} END{for (i=0; i<=h; i++) {if (a[i]) {cumsum+=a[i]} else {a[i]=0;} print i, a[i], cumsum}}' \
    > $pop.sum.bed.csv
done
```

<!-- markdownlint-enable MD013 -->

```{bash }
#| label: plot-sum-sample-set-coverage
#| echo: true
#| eval: true
#| code-fold: true
for pop in CEU CHB YRI; do
cat ${pop}.sum.bed.csv | \
  csvtk plot line -x 1 -y 2 --point-size 0.01 \
    --xlab "Depth of coverage (X)" --ylab "Genome coverage (kbp)" \
    --width 9.0 --height 3.5 --x-min 10 --x-max 100 > \
    fig-plot-total-coverage-distribution-hist-zoom-in-$pop.png
done

```

:::

Now we have combined total per sample coverage for ALL samples, and
for sample sets CEU, CHB, and YRI. The upcoming task will be to
generate sequence masks from the total coverage and minimum number of
individuals with coverage greater than zero.

### Filter on minimum number of individuals

In addition to filtering on coverage, we will also filter on the
minimum number of individuals with calls. This is to account for cases
where coverages that pass the coverage filter originate from just a
few samples. Here, we will remove sites where less than 50% of
individuals have a call.

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: awk-filter-50pct-ALL
#| echo: true
#| eval: true
bgzip -c -d ALL.bg.gz | \
  awk -v FS="\t" 'BEGIN {OFS="\t"} NR > 1 {count=0; for (i=4; i<=NF; i++) {if ($i>0) count+=1}; if (count>=((NF-3)*0.5)) {print $1, $2, $3}}' | \
  bgzip > ALL.ind.bed.gz
tabix -f -p bed ALL.ind.bed.gz
```

<!-- markdownlint-enable MD013 -->

#### Exercise

Generate coverage sums for sample sets CEU, CHB, and YRI.

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: awk-filter-50pct-sample-set
#| echo: true
#| eval: true
#| code-fold: true
for pop in CEU CHB YRI; do
  bgzip -c -d $pop.bed.gz | awk -v FS="\t" 'BEGIN {OFS="\t"} NR > 1 {count=0; for (i=4; i<=NF; i++) {if ($i>0) count+=1}; if (count>=((NF-3)*0.5)) {print $1, $2, $3}}' | bgzip > $pop.ind.bed.gz
  tabix -f -p bed $pop.ind.bed.gz
done
```

<!-- markdownlint-enable MD013 -->

## Sequence masks

Finally, for each sample set, we will use `bedtools intersect` to
generate combined bed files for total sum coverages and the filter on
number of individuals. `bedtools intersect` makes it easy to combine
multiple bed files, so other filters could be added.

FIXME: make coverage filter above and intersect with ROI files

```{bash }
#| label: bedtools-intersect-all
#| echo: true
#| eval: true
# bedtools intersect -a ALL.sum.bed.gz -b ALL.ind.bed.gz \
# -g ooa.chr21.ref.fa.fai | bgzip > ALL.mask.bed.gz
#tabix -f -p bed ALL.mask.bed.gz
```

Now we can use the command `bedtools makefasta` to make a sequence
mask file in fasta format. The file will consist of characters `0` and
`1`, where the latter are regions that will be masked out in
subsequent analyses. First, we make a mask file that consists solely
of `1`'s:

<!-- markdownlint-disable MD013 -->

```{bash }
#| label: bedtools-maskfasta-make-genome-mask
#| echo: true
#| eval: true
awk 'BEGIN {OFS="\t"} {print $1, 0, $2}' ooa.chr21.ref.fa.fai > ooa.chr21.ref.fa.bed
bedtools maskfasta -fi ooa.chr21.ref.fa -mc 1 -fo ooa.chr21.mask.ref.fa -bed ooa.chr21.ref.fa.bed
```

<!-- markdownlint-enable MD013 -->

# Variant filtering {#sec-E130-variant-filtering}

FIXME: discuss filters from Lou and more importantly when they are
used:

1. p-value
2. multi-allelic sites (but illustrate case where one subpop may be
   tri-allelic but sister populations bi-allelic - for sub-population
   specific analyses the latter should not be removed)
3. MAF filter - for many analyses low-frequency snps are uninformative
   (e.g. PCA, LD) and can bias results
